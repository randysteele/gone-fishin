{"ast":null,"code":"export default function destinations(state = {\n  destinations: []\n}, action) {\n  //debugger\n  switch (action.type) {\n    case 'FETCH_DESTINATIONS':\n      return {\n        destinations: action.payload\n      };\n\n    case 'ADD_FEATURE':\n      let destinations = state.destinations.map(destination => {\n        if (destination.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return destination;\n        }\n      });\n      return { ...state,\n        destinations: destinations\n      };\n\n    case 'DELETE_FEATURE':\n      debugger;\n      let destinationss = state.destinations.map(destination => {\n        if (destination.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return destination;\n        }\n      });\n      return { ...state,\n        destinations: destinationss\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/randysteele/flatiron/gone-fishin/gone-fishin-frontend/src/reducers/destinations.js"],"names":["destinations","state","action","type","payload","map","destination","id","destinationss"],"mappings":"AACA,eAAe,SAASA,YAAT,CAAsBC,KAAK,GAAG;AAACD,EAAAA,YAAY,EAAE;AAAf,CAA9B,EAAkDE,MAAlD,EAA0D;AACrE;AACA,UAAOA,MAAM,CAACC,IAAd;AACA,SAAK,oBAAL;AACE,aAAO;AAACH,QAAAA,YAAY,EAAEE,MAAM,CAACE;AAAtB,OAAP;;AACF,SAAK,aAAL;AACE,UAAIJ,YAAY,GAAGC,KAAK,CAACD,YAAN,CAAmBK,GAAnB,CAAuBC,WAAW,IAAI;AACvD,YAAIA,WAAW,CAACC,EAAZ,KAAmBL,MAAM,CAACE,OAAP,CAAeG,EAAtC,EAA0C;AACzC,iBAAOL,MAAM,CAACE,OAAd;AACA,SAFD,MAEO;AACL,iBAAOE,WAAP;AACD;AACF,OANkB,CAAnB;AAOA,aAAO,EAAC,GAAGL,KAAJ;AAAWD,QAAAA,YAAY,EAAEA;AAAzB,OAAP;;AACA,SAAK,gBAAL;AACI;AACF,UAAIQ,aAAa,GAAGP,KAAK,CAACD,YAAN,CAAmBK,GAAnB,CAAuBC,WAAW,IAAI;AACtD,YAAIA,WAAW,CAACC,EAAZ,KAAmBL,MAAM,CAACE,OAAP,CAAeG,EAAtC,EAA0C;AACzC,iBAAOL,MAAM,CAACE,OAAd;AACA,SAFD,MAEO;AACL,iBAAOE,WAAP;AACD;AACF,OANiB,CAApB;AAOE,aAAO,EAAC,GAAGL,KAAJ;AAAWD,QAAAA,YAAY,EAAEQ;AAAzB,OAAP;;AAEN;AACA,aAAOP,KAAP;AAxBA;AA0BH","sourcesContent":["\nexport default function destinations(state = {destinations: []}, action) {\n    //debugger\n    switch(action.type){\n    case 'FETCH_DESTINATIONS':\n      return {destinations: action.payload}\n    case 'ADD_FEATURE':\n      let destinations = state.destinations.map(destination => {\n        if (destination.id === action.payload.id) {\n         return action.payload\n        } else {\n          return destination\n        }\n      }) \n      return {...state, destinations: destinations}\n      case 'DELETE_FEATURE':\n          debugger\n        let destinationss = state.destinations.map(destination => {\n            if (destination.id === action.payload.id) {\n             return action.payload\n            } else {\n              return destination\n            }\n          }) \n          return {...state, destinations: destinationss}\n    \n    default:\n    return state\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}